1. program ComposeApp, urcuhomienie kontenerów:
  Aby uruchomić wszystkie serwisy jednocześnie: ->  docker-compose up
  Spowoduje to uruchomienie wszystkich trzech plików w oddzielnych kontenerach.
  Aby uruchomić pojedynczy serwis, np. tylko data_procession_service: ->  docker-compose up data_procession_service
  Aby zatrzymać działające serwisy: ->   docker-compose down
2. Konteneryzacja Total Commandera
  -> sprawdzenie wersji Windowsa: [System.Environment]::OSVersion.Version
  
3. konfigurowanie aplikacji Docker-Compose:
  -> cd diamol\ch07\exercises\todo-list-postgres
  Przeanalizuj pliki yml
  -> docker-compose up -d
  -> adres: http://localhost:8030/

4. Współpraca dockera z githubem
  -> pliku dockera (Dockerfile) można przechowywać na GitHubie i zdynamicznym udostępnieniem
  -> automatyczne budowanie obrazów na podstawie danych z GitHuba
  -> kod pliku: docker-build.yml daj możliwość automatycznego budowania i publikowania obrazów
  -> wymagania  -> ustawienie skretów na Githubie: np. DOCKER_USERNAME, DOCKER_PASSWORD ...
                -> zmiana nazwy repozytorium na DockerHub
  -> obrazy Dockera użuwamy przez usługę  GitHub Actions

5. DOCKER SWARM
-> przejście do trybu klastra: docker swarm init
-> dołączenie nowego węzła roboczego: docker swarm join-token worker
-> dołączenie nowego węzła managera: docker swarm join-token manager
-> wyświetlenie węzłów: docker node ls

-> twworzenie usługi uruchamiającej jeden kontener: docker service create --name timecheck --replicas 1 diamol/ch12-timecheck:1.0
-> sprawdzenie czy usługa została utworzona: docker service ls
-> lista kontenerów: docker service ps timecheck
-> usunięcie ostatniego uruchomionego kontenera usługi: docker container rm -f $(docker container ls --last 1 -q)
-> sprawdzenie repliki usługi: docker service ps timecheck
-> wpisy z dziennika z ostatnich 10s: docker service logs --since 10s timecheck
-> Szczegółowe informacje o usludze - nazwa obrazu:docker service inspect timecheck -f '{{.Spec.TaskTemplate.ContainerSpec.Image}}'
-> aktualizacja usługi: docker service update --image diamol/ch12-timecheck:2.0 timecheck
-> wyświetlenie replik usługi: docker service ps timecheck
-> sprawdzenie dzienników z ostatnich 20 s: docker service ps timecheck

6. Uzycie docker-compose w SWARM:
  -> wejście do katalogu: cd diamol\ch13\exercises
  -> wdrożenie stosu: docker stack deploy -c ./todo-list/v1.yml todo
  -> sprawdzenie stosów: docker stack ls
  -> wyświetlenie usług: docker service ls
  -> zauktalizowany plik compose  wdrożenie: docker stack deploy -c ./todo-list/v2.yml todo
  -> sprawdzenie replik usługi: docker service ps todo_todo-web
  -> wszystkie usługi: docker stack services todo
  -> wszysstkie repliki usług: docker stack ps todo
  -> usunięcie stosu: docker stack rm todo

KUBERNETES:
23. narzędzie wiersza poleceń kubernetes: kubectl get nodes
Komenda 24 -> narzędzie wiersza poleceń klastra Kubernetes:  kubectl get nodes
Komenda 25 -> uruchomienie kapsuły Kubernetes :  kubectl run hello-kiamol --image=kiamol/ch02-hello-kiamol --restart=Never
Komenda 26 -> oczekiwanie aż kapsuła będzie gotowa: kubectl wait --for=condition=Ready pod hello-kiamol
Komenda 27 -> wyświetlenie wszystkich kapsuł w klastrze: kubectl get pods
Komenda 28 -> wyświetlenie szczegółowych informacji o kapsule:  kubectl describe pod hello-kiamol
Komenda 29 -> określenie niestandardowycch kolumn w danych wyjściowych:  kubectl get pod hello-kiamol --output custom-columns=NAME:metadata.name,NODE_IP:status.hostIP,POD_IP:status.podI
Komenda 30 -> wyszukiwanie kontemeara danej kapsuły: docker container ls -q --filter label=io.kubernetes.container.name=hello-kiamol
Komenda 31 -> usunięcie kontenera:  docker container rm -f $(docker container ls -q --filter label=io.kubernetes.container.name=hello-kiamol)
Komenda 32 -> przywracanie kontenera do kapsuły: docker container ls -q --filter label=io.kubernetes.container.name=hello-kiamol
Komenda 33 -> uruchomienie aplikacji www:
     kubectl run hkiamol --image=kiamol/ch02-hello-kiamol --restart=Never
      kubectl get pod hkiamol
      kubectl port-forward pod/hkiamol 8080:80
      uruchom stronę: localhost:8080

Komenda 34 -> utowrzenie nowego wdrożenia: kubectl create deployment hello-kiamol-2 --image=kiamol/ch02-hello-kiamol
Konenda 35 -> wypisanie etykiet (json):  kubectl get deploy hello-kiamol-2 -o jsonpath='{.spec.template.metadata.labels}'
Komenda 36 -> wyświetlenie listy kapsuł, które mają pasującą etykietę:  kubectl get pods -l app=hello-kiamol-2
Komenda 37 -> dodanie nowej kapsuły opartej na zdefinjowanej etykiecie z nową etykietą:
    kubectl label pod hello-kiamol-2-787f8db75d-z8k4m app=hello-kiamol-x --overwrite
    kubectl label pods -l app=hello-kiamol-2 --overwrite app=hello-kiamol-y


