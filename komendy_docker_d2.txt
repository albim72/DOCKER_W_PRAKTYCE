Komendy DOCKER - dzień 2

1. Aplikacja języka GO:
    -> wejście do koatalogu: cd diamol\ch04\exercises\image-gallery
    -> utworzenie obrazu: docker build -t image-gallery .
    -> porównanie rozmiarów obrazów: docker image ls -f reference=diamol/golang -f reference=image-gallery
    -> uruchomienie kontenera: docker container run -d -p 802:80 --network nat image-gallery
    -> adres: localhost:802

2. Tworzenie obrazu i przkazanie go do dockerhub
    
    -> przypisanie do zminnej id użytkownika: $dockerId = "albim72"
    -> logowanie do dockerhub (podajesz swoje hasło do dockera): docker login --username $dockerId
    -> utworzenie instancji obrazu - otagowanie: docker tag image-gallery:latest $dockerId/image-gallery:v3  
    -> analiza referencji obrazu: docker image ls --filter reference=image-gallery --filter reference='*/image-gallery'
    -> umieszczenie obrazu na dockerhub: docker push $dockerId/image-gallery:v3
    -> wyświetlenie strony obrazu (otagowanego): echo "https://hub.docker.com/r/$dockerId/image-gallery/tags" - wejdź na stronę - otrzymassz widok obrazu i jego tagów

3. Rejestry dockera
    -> uruchomienie rejestru dockera: docker container run -d -p 5000:5000 --restart always diamol/registry
    -> wporwadznie nazwy zastępczej do pliku hosts: Add-Content -Value "127.0.0.1 registry.local" -Path /windows/system32/drivers/etc/hosts
    -> sprawdzenie nowej nazwy komputera lokalnego: ping registry.local
    -> utworzenie obrazu w rejestrze lokalnym: docker image tag image-gallery registry.local:5000/gallery/ui:v3
    -> pełna informacja na temat dockera: docker info
    -> umieszczenie obrazu w rejestrze lokalnym: docker image push registry.local:5000/gallery/ui:v3

4. Utworzenie złotego obrazu
    -> wejście do katalogu: cd diamol\ch05\exercises\dotnet-sdk
    -> utworzenie złotego obrazu: docker image build -t golden/dotnetcore-sdk:3.0 .

5. Tworzenie wolumenu:
    -> utworzenie wolumenu na podstawie obrazu:  docker container run --name todo1 -d -p 8010:80 diamol/ch06-todo-list
    -> inspekcja wolumenu: docker container inspect --format '{{.Mounts}}' todo1
    -> sprawdzenie listy wolumnów: docker volume ls

6. utworzenie obiektu docker-compose:
    -> utworzenie sieci: docker network create nat
    -> uruchomienie pliku docker-compose.yml: docker-compose up
